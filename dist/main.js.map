{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/electron.js","webpack:///external \"electron\"","webpack:///external \"path\"","webpack:///external \"url\""],"names":["currentWindow","newWindow","BrowserWindow","title","icon","backgroundColor","height","width","webPreferences","nodeIntegration","process","loadURL","webContents","openDevTools","on","app","allowRendererProcessReuse"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;CAGA;;AACA,IAAIA,aAAJ,C,CAEA;;AACA,SAASC,SAAT,GAAqB;AACnBD,eAAa,GAAG,IAAIE,sDAAJ,CAAkB;AAChCC,SAAK,EAAE,MADyB;AAEhC;AACAC,QAAI,EAAE,IAH0B;AAIhC;AACAC,mBAAe,EAAE,UALe;AAMhC;AACAC,UAAM,EAAE,GAPwB;AAQhCC,SAAK,EAAE,GARyB;AAShC;AACAC,kBAAc,EAAE;AAAEC,qBAAe,EAAE;AAAnB;AAVgB,GAAlB,CAAhB,CADmB,CAcnB;AACA;;AACA,MAAIC,IAAJ,EAA4C;AAC1CV,iBAAa,CAACW,OAAd,CAAsB,uBAAtB;AACAX,iBAAa,CAACY,WAAd,CAA0BC,YAA1B;AACD,GAHD,CAIA;AAJA,OAKK,EArBc,CAmCnB;AACA;;;AACAb,eAAa,CAACc,EAAd,CAAiB,QAAjB,EAA2B,YAAM;AAC/Bd,iBAAa,GAAG,IAAhB;AACD,GAFD;AAGD,C,CACD;AACA;;;AACAe,4CAAG,CAACD,EAAJ,CAAO,OAAP,EAAgBb,SAAhB,E,CACA;AACA;;AACAc,4CAAG,CAACC,yBAAJ,GAAgC,IAAhC,C;;;;;;;;;;;ACtDA,qC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,gC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./public/electron.js\");\n","import { app, BrowserWindow } from \"electron\";\nimport * as path from \"path\";\nimport * as url from \"url\";\n\n// currentWindow represents our current rendered page in electron app\nlet currentWindow;\n\n// create a function that opens a create a new window\nfunction newWindow() {\n  currentWindow = new BrowserWindow({\n    title: \"eeQL\",\n    // to be determined\n    icon: null,\n    // eeql-blue\n    backgroundColor: \"##1c90f5\",\n    // starting dimensions of new window\n    height: 800,\n    width: 800,\n    // allow integration of node modules in build.\n    webPreferences: { nodeIntegration: true },\n  });\n\n  // check if dist folder exists by running a test on the node environmnet\n  // if in development mode, serve the local server to electron\n  if (process.env.NODE_ENV === \"development\") {\n    currentWindow.loadURL(\"http://localhost:4000\");\n    currentWindow.webContents.openDevTools();\n  }\n  // otherwise, serve the compile dist folder for render\n  else {\n    currentWindow.loadURL(\n      // tried implementing WhatWG URL, it's current non-functional, see dicussion reference for more details.\n      // https://github.com/nodejs/node/issues/25099\n      url.format({\n        // allow electron to render a file (html), in our dist folder\n        pathname: path.resolve(__dirname, \"../dist/index.html\"),\n        // set type\n        protocol: \"file:\",\n        // allow for propper formating of directory name.\n        slashes: true,\n      })\n    );\n  }\n  // set window to null after app is closed.\n  // create IPC event listener on browserRouter\n  currentWindow.on(\"closed\", () => {\n    currentWindow = null;\n  });\n}\n// after IPC event listener is triggered \"ready\"\n// invoke our create new window by invoking \"newWindow()\"\napp.on(\"ready\", newWindow);\n// electron, by default, refreshes every navigation\n// since we're using node modules outside of our dist folder, we have to disable auto refresh\napp.allowRendererProcessReuse = true;\n","module.exports = require(\"electron\");","module.exports = require(\"path\");","module.exports = require(\"url\");"],"sourceRoot":""}